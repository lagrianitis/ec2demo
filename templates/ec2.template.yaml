AWSTemplateFormatVersion: "2010-09-09"
Description: fa

Parameters:
  SubnetId:
    Type: 'AWS::EC2::Subnet::Id'
    Description: The SubnetIds in your VPC
    ConstraintDescription: >-
      Must be an existing subnet associated with the selected VPC.
  InstanceType:
    Description: EC2 instance type to launch.
    Type: String
    Default: t2.micro
    AllowedValues: [t1.micro, t2.nano, t2.micro, t2.small, t2.medium, t2.large, m1.small,
                    m1.medium, m1.large, m1.xlarge, m2.xlarge, m2.2xlarge, m2.4xlarge, m3.medium,
                    m3.large, m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge,
                    m4.10xlarge, c1.medium, c1.xlarge, c3.large, c3.xlarge, c3.2xlarge, c3.4xlarge,
                    c3.8xlarge, c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, g2.2xlarge,
                    g2.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge, r3.8xlarge, i2.xlarge,
                    i2.2xlarge, i2.4xlarge, i2.8xlarge, d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge,
                    hi1.4xlarge, hs1.8xlarge, cr1.8xlarge, cc2.8xlarge, cg1.4xlarge]
    ConstraintDescription: Must be a valid EC2 instance type.
  GoldenAmiIdSsmParameterName:
    Type:  'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Description: SSM Parameter store Name of Golden AMI ID
    Default: '/latest/golden-ami-id'
  EnableSSMSessionManager:
    Type: String
    Description: >-
      Enable SSM Session Manager so you can connect on EC2 Instances?
      The EC2 Instance need to have session manager agent installed
      to be able to connect. Instances with pre-installed agent can
      be found @ https://docs.aws.amazon.com/systems-manager/latest/userguide/ssm-agent.html
    AllowedValues:
      - 'yes'
      - 'no'
    ConstraintDescription: Must be one of yes | on

Conditions:
  EnableSessionManager:
    Fn::Equals:
      - Ref: 'EnableSSMSessionManager'
      - 'yes'

Resources:
# *** EC2 Launch Template definition
#     This Launch template will use the GoldenAMI as AMI
#     It will also attach
  Ec2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId:
          Ref: 'GoldenAmiId'
        InstanceType:
          Ref: 'InstanceType'
        IamInstanceProfile:
          Fn::If:
            -
              EnableSessionManager
            -
              Arn:
                Fn::GetAtt:
                  - Ec2InstanceProfile
                  - Arn
            -
              Ref: 'AWS::NoValue'
        NetworkInterfaces:
          - DeviceIndex: 0
            SubnetId:
              Ref: SubnetId
        TagSpecifications:
          -
            ResourceType: instance
            Tags:
              -
                Key: Name
                Value:
                  Fn::Sub: "${AWS::StackName}-instance"
              -
                Key: ApplicationName
                Value:
                  Ref: 'AWS::StackName'

 # *** Launch an EC2 Instance based on the Launch Template
  Ec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId:
          Ref: 'Ec2LaunchTemplate'
        Version: '1'

  # *** IAM Role required to use SSM Session Manager.
  #     It will deployed only if EnableSSMSessionManager Parameter
  #     is set to yes.
  SSMSessionManagerIamRole:
    Condition: EnableSessionManager
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - config.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
      Tags:
        -
          Key: ApplicationName
          Value:
            Ref: 'AWS::StackName'

  # *** EC2 Instance Profile to attach the IAM Role required to use
  #     SSM Session Manager.
  #     It will deployed only if EnableSSMSessionManager Parameter
  #     is set to yes.
  Ec2InstanceProfile:
    Condition: EnableSessionManager
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path:
        Fn::Sub: '/${AWS::StackName}/'
      Roles:
        - Ref: 'SSMSessionManagerIamRole'

  # *** Create ec2-instance-no-public-ip config rule
  ConfigRuleEC2NoPublicIp:
    Type: 'AWS::Config::ConfigRule'
    Properties:
      ConfigRuleName: ec2-instance-no-public-ip
      Description: >-
        Checks whether Amazon EC2 instances have a public IP association.
        The rule is NON_COMPLIANT if the publicIp field is present in the Amazon
        EC2 instance configuration item. This rule will be triggered on
        Configuration changes.
        Ref: https://docs.aws.amazon.com/config/latest/developerguide/ec2-instance-no-public-ip.html
      Scope:
        ComplianceResourceTypes:
          - 'AWS::EC2::Instance'
      Source:
        Owner: AWS
        SourceIdentifier: EC2_INSTANCE_NO_PUBLIC_IP
